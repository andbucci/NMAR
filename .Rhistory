temp1B = matrix(0, nrow = n, ncol = n)
temp2B = matrix(0, nrow = n, ncol = n)
for(t in (p+1):Treg[j]){
temp3B = matrix(0, nrow = n, ncol = n)
for(k in 1:p){
seqex = 1:p
seqex = seqex[-k]
for(l in seqex){
temp3B = B[[l]][[j]]%*%t(datalist[[j]][,,(t-l)])%*%t(A[[l]][[j]])%*%A[[k]][[j]]%*%data[,,(t-k)]+temp3B
}
if(constant == TRUE){
temp1B = t(datalist[[j]][,,t]-M[[j]]) %*%A[[k]][[j]]%*%datalist[[j]][,,(t-k)] - temp3B + temp1B
}else{
temp1B = t(datalist[[j]][,,t]) %*%A[[k]][[j]]%*%datalist[[j]][,,(t-k)] -temp3B + temp1B
}
temp2B = t(datalist[[j]][,,(t-k)])%*%t(A[[k]][[j]])%*%A[[k]][[j]]%*%datalist[[j]][,,(t-k)] + temp2B
Bcheck = temp1B %*% MASS::ginv(temp2B)
if(iter >1){
bdiff = abs(B[[k]][[j]] - Bcheck)
}
}
}
#B[[k]][[j]] = temp1B %*% MASS::ginv(temp2B)
B[[k]][[j]] = temp1B/temp2B
if(constant == TRUE){
temp1M = matrix(0, nrow = m, ncol = n)
for(t in (p+1):Treg[j]){
temp2M = matrix(0, nrow = m, ncol = n)
for(k in 1:p){
temp2M = A[[k]][[j]]%*%datalist[[j]][,,(t-k)]%*%t(B[[k]][[j]])
}
temp1M = datalist[[j]][,,t] - temp2M + temp1M
}
M[[j]] = temp1M/(Treg[j]-1)
}
if(verbose==TRUE){
print(iter)}
}
####Compute sum of squared residuals####
epsilon1 = matrix(0, nrow = Treg[j], ncol = m*n)
epsilon1m = matrix(0, ncol = m*n, nrow = m*n)
for(l in (p+1):Treg[j]){
epsilon2 = matrix(0, nrow = m, ncol = n)
for(k in 1:p){
epsilon2 = A[[k]][[j]]%*%datalist[[j]][,,(l-k)]%*%t(B[[k]][[j]])+epsilon2
}
if(constant == TRUE){
epsilon1[l,] = matrixcalc::vec(datalist[[j]][,,l] - M[[j]]- epsilon2)
}else{
epsilon1[l,] = matrixcalc::vec(datalist[[j]][,,l] - epsilon2)
}
epsilon1m = epsilon1[l,] %*% t(epsilon1[l,]) + epsilon1m
}
errors[[j]] = epsilon1m
}
Alist[[i]] = A
Blist[[i]] = B
if(constant == TRUE){
Mlist[[i]] = M
}
errlist = lapply(errors, tr)
QQ[i] = Reduce("+", errlist)
if(verbose==TRUE){
cat(paste(i, 'th', ' combination', sep = ''))}
Sys.sleep(time = 1)
}
close(pb)
if(constant == TRUE){
theta <- list(A = Alist[[which.min(QQ)]], B = Blist[[which.min(QQ)]],
M = Mlist[[which.min(QQ)]],
c = t(as.matrix(stq1[which.min(QQ),])))
}else{
theta <- list(A = Alist[[which.min(QQ)]], B = Blist[[which.min(QQ)]],
c = t(as.matrix(stq1[which.min(QQ),])))
}
stationary_A <- rapply(theta$A, sparsevar::spectralRadius)
stationary_B <- rapply(theta$B, sparsevar::spectralRadius)
stat_check = (Reduce("*", stationary_A)*Reduce("*", stationary_B))<1
index = list()
for(i in 1:regimes){
if(i == 1){
index[[i]] =  which(st < theta$c[1,i])
}else if(i > 1 & i != regimes){
index[[i]] =  which(st >= theta$c[1,(i-1)] & st < theta$c[1,i])
}else{
index[[i]] =  which(st >= theta$c[1,(i-1)])
}
}
fit.val = array(data = NA, dim = c(m,n,Tlength))
res.val = array(data = NA, dim = c(m,n,Tlength))
xvec = matrix(NA, nrow = Tlength, ncol = m*n)
Sigma = matrix(0, nrow = m*n, ncol = m*n)
for(i in (p+1):Tlength){
for(j in 1:regimes){
if(i %in% index[[j]]){
fittmp = matrix(0, nrow = m, ncol = n)
for(k in 1:p){
fittmp = theta$A[[k]][[j]]%*%data[,,(i-k)]%*%t(theta$B[[k]][[j]])
}
if(constant == TRUE){
fit.val[,,i] = theta$M[[j]] + fittmp
}else{
fit.val[,,i] = fittmp
}
}
}
res.val[,,i] = data[,,i] - fit.val[,,i]
Sigma = Sigma + ks::vec(res.val[,,i]) %*% t(ks::vec(res.val[,,i]))
xvec[i,] = ks::vec(data[,,(i-1)])
}
Omega = Sigma/(Tlength-1L)
Sigmar = list()
Sigmar2 = list()
for(j in 1:regimes){
dfperm = aperm(data[,,index[[j]]], c(3,1,2))
for(k in 1:p){
Sigmar2[[k]] = covtosd(Sigma, c(m,n), R = 1, p = 1, A = list(theta$A[[k]][[j]], theta$B[[k]][[j]]),
AX = dfperm[-1,,])
}
Sigmar[[j]] = Sigmar2
}
# for(s in 1:pred.step){
#   tensor[,,(T1+s)] = iterations[[maxiter]]$A %*% tensor[,,(T+s-1)] %*% t(iterations[[maxiter]]$B)
# }
# predictions = tensor[,,((T1+1):(T1+pred.step))]
if(constant == TRUE){
results = list(stationary = stat_check, A = theta$A,
B = theta$B, M = theta$M, threshold = theta$c, Sigma = Omega,
serr = Sigmar, dimensions = lapply(index, length))
}else{
results = list(stationary = stat_check, A = theta$A,
B = theta$B,  threshold = theta$c, Sigma = Omega,
serr = Sigmar, dimensions = lapply(index, length))
}
return(results)
}
fit.MTAR <- MTAR(simuldata$data, regimes = 3, maxiter = 30, ncores = 4, st = simuldata$st,
initA = initA, initB = initB, initM = initM, q = 0.05,
verbose = F)
fit.MTAR$threshold
fit.MTAR$B
fit.MTAR$A
fit.MTAR$M
i
j
i = 1
j = 1
Alist = list()
Blist = list()
Mlist = list()
datalist = list()
errors = list()
Treg = rep(0, regimes)
QQ = rep(0, nrow(stq1))
pb <- txtProgressBar(0, nrow(stq1), style = 3)
stq1[137,] = c(0.3,.7)
stq1[137,] = c(0.3,0.70)
stq1 = rbind(stq1, c(0.3,.7))
i = 137
A = initA
B = initB
M = initM
A
B
M
datalist[[j]] = data[,,which(st < stq1[i,j])]
Treg[j] = dim(datalist[[j]])[3]
iter = 0
bdiff = matrix(1, nrow = n, ncol = n)
iter <- iter+1
temp1A = matrix(0, nrow = m, ncol = m)
temp2A = matrix(0, nrow = m, ncol = m)
for(t in (p+1):Treg[j]){
temp3A = matrix(0, nrow = m, ncol = m)
for(k in 1:p){
seqex = 1:p
seqex = seqex[-k]
for(l in seqex){
temp3A = A[[l]][[j]]%*%datalist[[j]][,,(t-l)]%*%t(B[[l]][[j]])%*%B[[k]][[j]]%*%t(data[,,(t-k)])+temp3A
}
if(constant == TRUE){
temp1A = datalist[[j]][,,t] %*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)]) -
M[[j]]%*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)]) - temp3A + temp1A
}else{
temp1A = (datalist[[j]][,,t] %*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)])-temp3A) + temp1A
}
temp2A = (datalist[[j]][,,(t-k)]%*%t(B[[k]][[j]])%*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)])) + temp2A
}
}
temp1A %*% MASS::ginv(temp2A)
temp1B = matrix(0, nrow = n, ncol = n)
temp2B = matrix(0, nrow = n, ncol = n)
for(t in (p+1):Treg[j]){
temp3B = matrix(0, nrow = n, ncol = n)
for(k in 1:p){
seqex = 1:p
seqex = seqex[-k]
for(l in seqex){
temp3B = B[[l]][[j]]%*%t(datalist[[j]][,,(t-l)])%*%t(A[[l]][[j]])%*%A[[k]][[j]]%*%data[,,(t-k)]+temp3B
}
if(constant == TRUE){
temp1B = t(datalist[[j]][,,t]-M[[j]]) %*%A[[k]][[j]]%*%datalist[[j]][,,(t-k)] - temp3B + temp1B
}else{
temp1B = t(datalist[[j]][,,t]) %*%A[[k]][[j]]%*%datalist[[j]][,,(t-k)] -temp3B + temp1B
}
temp2B = t(datalist[[j]][,,(t-k)])%*%t(A[[k]][[j]])%*%A[[k]][[j]]%*%datalist[[j]][,,(t-k)] + temp2B
Bcheck = temp1B %*% MASS::ginv(temp2B)
if(iter >1){
bdiff = abs(B[[k]][[j]] - Bcheck)
}
}
}
temp1B %*% MASS::ginv(temp2B)
p
tempÂ£B
temp3B
temp3A
Treg[j] = dim(datalist[[j]])[3]
iter = 0
bdiff = matrix(1, nrow = n, ncol = n)
iter <- iter+1
temp1A = matrix(0, nrow = m, ncol = m)
temp2A = matrix(0, nrow = m, ncol = m)
for(k in 1:p){
seqex = 1:p
seqex = seqex[-k]
for(t in (p+1):Treg[j]){
temp3A = matrix(0, nrow = m, ncol = m)
for(l in seqex){
temp3A = A[[l]][[j]]%*%datalist[[j]][,,(t-l)]%*%t(B[[l]][[j]])%*%B[[k]][[j]]%*%t(data[,,(t-k)])+temp3A
}
if(constant == TRUE){
temp1A = datalist[[j]][,,t] %*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)]) -
M[[j]]%*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)]) - temp3A + temp1A
}else{
temp1A = (datalist[[j]][,,t] %*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)])-temp3A) + temp1A
}
temp2A = (datalist[[j]][,,(t-k)]%*%t(B[[k]][[j]])%*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)])) + temp2A
}
A[[k]][[j]] = frob.rescale(temp1A %*% MASS::ginv(temp2A))
}
temp1A %*% MASS::ginv(temp2A)
#'fit.MTAR <- MTAR(simuldata$data, regimes = 3, maxiter = 30, st = simuldata$st,
#'initA = initA, initB = initB, initM = initM, q = 0.05,
#'verbose = F, ncores = 4)
#'# a few methods for VLSTAR
#'print(fit.MTAR)
#'summary(fit.MTAR)
#'plot(fit.MTAR)
#'predict(fit.MTAR, st.new = 1, n.ahead = 1)
#'coef(fit.MTAR)}
#'
MTAR <- function(data, p = 1, regimes = 3, maxiter = 200, st, q = 0.10,
constant = TRUE, initA, initB, initM = NULL,
epsilon = 10^(-3), verbose = TRUE, ncores = 6){
chk <- Sys.getenv("_R_CHECK_LIMIT_CORES_", "")
if(is.null(ncores)){
if (nzchar(chk) && chk == "TRUE") {
# use 2 cores in CRAN/Travis/AppVeyor
ncores <- 2L
} else {
ncores <- parallel::detectCores()
}}
m = dim(data)[1]
n = dim(data)[2]
Tlength = dim(data)[3]
st = st
st_q = quantile(st, probs = seq(0.1,0.9,q))
message(paste('Alternative least square estimation of a MTAR\n'))
stq = expand.grid(rep(list(st_q), (regimes-1)))
stq1 = as.matrix(stq[rowSums(as.matrix(stq[,-ncol(stq)]) < stq[,-1]) == ncol(stq) - 1,])
Alist = list()
Blist = list()
Mlist = list()
datalist = list()
errors = list()
Treg = rep(0, regimes)
QQ = rep(0, nrow(stq1))
pb <- txtProgressBar(0, nrow(stq1), style = 3)
for(i in 1:nrow(stq1)){
setTxtProgressBar(pb, i)
A = initA
B = initB
M = initM
for(j in 1:regimes){
if(j == 1){
datalist[[j]] = data[,,which(st < stq1[i,j])]
}else if(j > 1 & j != regimes){
datalist[[j]] = data[,,which(st >= stq1[i,(j-1)] & st < stq1[i, j])]
}else{
datalist[[j]] = data[,,which(st >= stq1[i,(j-1)])]
}
Treg[j] = dim(datalist[[j]])[3]
iter = 0
bdiff = matrix(1, nrow = n, ncol = n)
while(iter < maxiter & all(bdiff > epsilon)){
iter <- iter+1
temp1A = matrix(0, nrow = m, ncol = m)
temp2A = matrix(0, nrow = m, ncol = m)
for(k in 1:p){
seqex = 1:p
seqex = seqex[-k]
for(t in (p+1):Treg[j]){
temp3A = matrix(0, nrow = m, ncol = m)
for(l in seqex){
temp3A = A[[l]][[j]]%*%datalist[[j]][,,(t-l)]%*%t(B[[l]][[j]])%*%B[[k]][[j]]%*%t(data[,,(t-k)])+temp3A
}
if(constant == TRUE){
temp1A = datalist[[j]][,,t] %*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)]) -
M[[j]]%*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)]) - temp3A + temp1A
}else{
temp1A = (datalist[[j]][,,t] %*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)])-temp3A) + temp1A
}
temp2A = (datalist[[j]][,,(t-k)]%*%t(B[[k]][[j]])%*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)])) + temp2A
}
A[[k]][[j]] = frob.rescale(temp1A %*% MASS::ginv(temp2A))
}
temp1B = matrix(0, nrow = n, ncol = n)
temp2B = matrix(0, nrow = n, ncol = n)
for(k in 1:p){
seqex = 1:p
seqex = seqex[-k]
for(t in (p+1):Treg[j]){
temp3B = matrix(0, nrow = n, ncol = n)
for(l in seqex){
temp3B = B[[l]][[j]]%*%t(datalist[[j]][,,(t-l)])%*%t(A[[l]][[j]])%*%A[[k]][[j]]%*%data[,,(t-k)]+temp3B
}
if(constant == TRUE){
temp1B = t(datalist[[j]][,,t]-M[[j]]) %*%A[[k]][[j]]%*%datalist[[j]][,,(t-k)] - temp3B + temp1B
}else{
temp1B = t(datalist[[j]][,,t]) %*%A[[k]][[j]]%*%datalist[[j]][,,(t-k)] -temp3B + temp1B
}
temp2B = t(datalist[[j]][,,(t-k)])%*%t(A[[k]][[j]])%*%A[[k]][[j]]%*%datalist[[j]][,,(t-k)] + temp2B
Bcheck = temp1B %*% MASS::ginv(temp2B)
if(iter >1){
bdiff = abs(B[[k]][[j]] - Bcheck)
}
}
B[[k]][[j]] = temp1B %*% MASS::ginv(temp2B)
}
if(constant == TRUE){
temp1M = matrix(0, nrow = m, ncol = n)
for(t in (p+1):Treg[j]){
temp2M = matrix(0, nrow = m, ncol = n)
for(k in 1:p){
temp2M = A[[k]][[j]]%*%datalist[[j]][,,(t-k)]%*%t(B[[k]][[j]])
}
temp1M = datalist[[j]][,,t] - temp2M + temp1M
}
M[[j]] = temp1M/(Treg[j]-1)
}
if(verbose==TRUE){
print(iter)}
}
####Compute sum of squared residuals####
epsilon1 = matrix(0, nrow = Treg[j], ncol = m*n)
epsilon1m = matrix(0, ncol = m*n, nrow = m*n)
for(l in (p+1):Treg[j]){
epsilon2 = matrix(0, nrow = m, ncol = n)
for(k in 1:p){
epsilon2 = A[[k]][[j]]%*%datalist[[j]][,,(l-k)]%*%t(B[[k]][[j]])+epsilon2
}
if(constant == TRUE){
epsilon1[l,] = matrixcalc::vec(datalist[[j]][,,l] - M[[j]]- epsilon2)
}else{
epsilon1[l,] = matrixcalc::vec(datalist[[j]][,,l] - epsilon2)
}
epsilon1m = epsilon1[l,] %*% t(epsilon1[l,]) + epsilon1m
}
errors[[j]] = epsilon1m
}
Alist[[i]] = A
Blist[[i]] = B
if(constant == TRUE){
Mlist[[i]] = M
}
errlist = lapply(errors, tr)
QQ[i] = Reduce("+", errlist)
if(verbose==TRUE){
cat(paste(i, 'th', ' combination', sep = ''))}
Sys.sleep(time = 1)
}
close(pb)
if(constant == TRUE){
theta <- list(A = Alist[[which.min(QQ)]], B = Blist[[which.min(QQ)]],
M = Mlist[[which.min(QQ)]],
c = t(as.matrix(stq1[which.min(QQ),])))
}else{
theta <- list(A = Alist[[which.min(QQ)]], B = Blist[[which.min(QQ)]],
c = t(as.matrix(stq1[which.min(QQ),])))
}
stationary_A <- rapply(theta$A, sparsevar::spectralRadius)
stationary_B <- rapply(theta$B, sparsevar::spectralRadius)
stat_check = (Reduce("*", stationary_A)*Reduce("*", stationary_B))<1
index = list()
for(i in 1:regimes){
if(i == 1){
index[[i]] =  which(st < theta$c[1,i])
}else if(i > 1 & i != regimes){
index[[i]] =  which(st >= theta$c[1,(i-1)] & st < theta$c[1,i])
}else{
index[[i]] =  which(st >= theta$c[1,(i-1)])
}
}
fit.val = array(data = NA, dim = c(m,n,Tlength))
res.val = array(data = NA, dim = c(m,n,Tlength))
xvec = matrix(NA, nrow = Tlength, ncol = m*n)
Sigma = matrix(0, nrow = m*n, ncol = m*n)
for(i in (p+1):Tlength){
for(j in 1:regimes){
if(i %in% index[[j]]){
fittmp = matrix(0, nrow = m, ncol = n)
for(k in 1:p){
fittmp = theta$A[[k]][[j]]%*%data[,,(i-k)]%*%t(theta$B[[k]][[j]])
}
if(constant == TRUE){
fit.val[,,i] = theta$M[[j]] + fittmp
}else{
fit.val[,,i] = fittmp
}
}
}
res.val[,,i] = data[,,i] - fit.val[,,i]
Sigma = Sigma + ks::vec(res.val[,,i]) %*% t(ks::vec(res.val[,,i]))
xvec[i,] = ks::vec(data[,,(i-1)])
}
Omega = Sigma/(Tlength-1L)
Sigmar = list()
Sigmar2 = list()
for(j in 1:regimes){
dfperm = aperm(data[,,index[[j]]], c(3,1,2))
for(k in 1:p){
Sigmar2[[k]] = covtosd(Sigma, c(m,n), R = 1, p = 1, A = list(theta$A[[k]][[j]], theta$B[[k]][[j]]),
AX = dfperm[-1,,])
}
Sigmar[[j]] = Sigmar2
}
# for(s in 1:pred.step){
#   tensor[,,(T1+s)] = iterations[[maxiter]]$A %*% tensor[,,(T+s-1)] %*% t(iterations[[maxiter]]$B)
# }
# predictions = tensor[,,((T1+1):(T1+pred.step))]
if(constant == TRUE){
results = list(stationary = stat_check, A = theta$A,
B = theta$B, M = theta$M, threshold = theta$c, Sigma = Omega,
serr = Sigmar, dimensions = lapply(index, length))
}else{
results = list(stationary = stat_check, A = theta$A,
B = theta$B,  threshold = theta$c, Sigma = Omega,
serr = Sigmar, dimensions = lapply(index, length))
}
return(results)
}
fit.MTAR <- MTAR(simuldata$data, regimes = 3, maxiter = 30, ncores = 4, st = simuldata$st,
initA = initA, initB = initB, initM = initM, q = 0.05,
verbose = F)
fit.MTAR$stationary
fit.MTAR$tj
fit.MTAR$threshold
fit.MTAR$M
fit.MTAR$A
fit.MTAR$B
i
j
A
B
M
iter <- iter+1
temp1A = matrix(0, nrow = m, ncol = m)
temp2A = matrix(0, nrow = m, ncol = m)
for(k in 1:p){
seqex = 1:p
seqex = seqex[-k]
for(t in (p+1):Treg[j]){
temp3A = matrix(0, nrow = m, ncol = m)
for(l in seqex){
temp3A = A[[l]][[j]]%*%datalist[[j]][,,(t-l)]%*%t(B[[l]][[j]])%*%B[[k]][[j]]%*%t(data[,,(t-k)])+temp3A
}
if(constant == TRUE){
temp1A = datalist[[j]][,,t] %*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)]) -
M[[j]]%*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)]) - temp3A + temp1A
}else{
temp1A = (datalist[[j]][,,t] %*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)])-temp3A) + temp1A
}
temp2A = (datalist[[j]][,,(t-k)]%*%t(B[[k]][[j]])%*%B[[k]][[j]]%*%t(datalist[[j]][,,(t-k)])) + temp2A
}
A[[k]][[j]] = frob.rescale(temp1A %*% MASS::ginv(temp2A))
}
A[[1]]
stq1 = as.matrix(stq[rowSums(as.matrix(stq[,-ncol(stq)]) < stq[,-1]) == ncol(stq) - 1,])
View(stq1)
paste('c', rep(1:(regimes-1)))
paste('c', rep(1:(regimes-1)), sep = '')
colnames(stq1) = paste('c', rep(1:(regimes-1)), sep = '')
View(stq1)
library(methods)
?methods
?norm
?svd
?kronecker
?aperm
?rnorm
roxygen2::roxygenise()
setwd('C:/Users/andre/Documents/NMAR')
roxygen2::roxygenise()
rm(list = c("MTAR", "MTAR.sim"))
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(devtools)
install_github('andbucci/NMAR')
install_github('andbucci/NMAR')
install_github('andbucci/NMAR')
